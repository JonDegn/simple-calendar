{"version":3,"sources":["App.js","index.js"],"names":["getFirstOfMonth","d","Date","setDate","setHours","getMonthList","start","end","months","curMonth","push","addMonths","prototype","addDays","days","date","this","getDate","setMonth","getMonth","formDefaults","startMonth","endMonth","App","useReducer","prevState","value","key","state","dispatch","className","htmlFor","id","selected","startDate","endDate","onChange","dateFormat","showMonthYearPicker","showFullMonthYearPicker","showTwoColumnMonthYearPicker","selectsStart","selectsEnd","filterDate","href","style","padding","size","orientation","map","m","fontSize","textAlign","marginBottom","toLocaleDateString","month","getFullYear","width","height","paint","painter","availableWidth","availableHeight","xMax","yMax","xStep","lastDay","totalDays","getDay","rows","Math","ceil","yStep","i","moveTo","lineTo","stroke","y","dayName","UTC","weekday","text","valueOf","fillColor","toString","floor","drawCalendar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.504f0322.chunk.js","sourcesContent":["import './App.css';\nimport React, { useReducer } from 'react';\nimport { PDFViewer, Document, Page, View, Canvas, Text } from '@react-pdf/renderer';\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nDate.prototype.addDays = function (days) {\n  var date = new Date(this);\n  date.setDate(date.getDate() + days);\n  return date;\n}\nDate.prototype.addMonths = function (months) {\n  var date = new Date(this);\n  date.setMonth(date.getMonth() + months);\n  return date;\n}\n\nfunction drawCalendar(painter, xMax, yMax, month) {\n  const dayHeaderHeight = 20\n  const availableHeight = yMax - (dayHeaderHeight)\n  const availableWidth = xMax\n  const xStep = availableWidth / 7\n\n  const lastDay = new Date(month.getFullYear(), month.getMonth() + 1, 0) // Get last day of month using this trick: https://stackoverflow.com/a/1184359\n  const totalDays = month.getDay() + lastDay.getDate()\n  const rows = Math.ceil(totalDays / 7)\n  const yStep = availableHeight / rows\n\n  // Paint vertical lines\n  for (let i = 0; i <= 7; i++) {\n    painter\n      .moveTo(xStep * i, 0)\n      .lineTo(xStep * i, dayHeaderHeight + (rows * yStep))\n      .stroke()\n  }\n  // Paint top horizontal line\n  painter\n    .moveTo(0, 0)\n    .lineTo(xStep * 7, 0)\n    .stroke()\n  // Paint horizontal lines\n  for (let i = 0; i <= rows; i++) {\n    let y = dayHeaderHeight + (i * yStep)\n    painter\n      .moveTo(0, y)\n      .lineTo(xStep * 7, y)\n      .stroke()\n  }\n  // Paint weekday names\n  for (let i = 0; i < 7; i++) {\n    const dayName = new Date(Date.UTC(2017, 0, 2)).addDays(i).toLocaleDateString('default', { weekday: 'long' })\n    painter.fontSize(12).text(dayName, xStep * i + 5, 5)\n  }\n  // Get start of first week even if it's not in the current month\n  let startDate = new Date(month.valueOf())\n  while (startDate.getDay() > 0) {\n    startDate.setDate(startDate.getDate() - 1)\n  }\n  // Paint dates\n  for (let d = 0; d < 7 * rows; d++) {\n    const date = startDate.addDays(d)\n    if (date.getMonth() != month.getMonth()) {\n      painter.fillColor(\"#DCDCDC\")\n    }\n    painter.text(date.getDate().toString(), (d % 7) * xStep + 5, dayHeaderHeight + (Math.floor(d / 7) * yStep) + 5)\n    painter.fillColor(\"black\")\n  }\n}\n\nfunction getFirstOfMonth() {\n  const d = new Date()\n  d.setDate(1)\n  d.setHours(0, 0, 0, 0)\n  return d\n}\n\nfunction getMonthList(start, end) {\n  let months = []\n  let curMonth = start\n  while (curMonth <= end) {\n    months.push(new Date(curMonth))\n    curMonth = curMonth.addMonths(1)\n  }\n  return months;\n}\n\nconst formDefaults = {\n  startMonth: getFirstOfMonth(),\n  endMonth: getFirstOfMonth()\n}\n\nfunction App() {\n  const formReducer = (prevState, { value, key }) => { return { ...prevState, [key]: value }; }\n  const [state, dispatch] = useReducer(formReducer, formDefaults)\n\n  return (\n    <div className=\"app\">\n      <div className=\"sidebar\">\n        <div className=\"sidebar-content\">\n          <h1>Simple Calendar</h1>\n          <label htmlFor='startMonth'>From</label>\n          <DatePicker\n            id=\"startMonth\"\n            selected={state.startMonth}\n            startDate={state.startMonth}\n            endDate={state.endMonth}\n            onChange={start => dispatch({ value: start, key: 'startMonth' })}\n            dateFormat=\"MMMM yyyy\"\n            showMonthYearPicker\n            showFullMonthYearPicker\n            showTwoColumnMonthYearPicker\n            selectsStart\n          />\n          <label htmlFor='endMonth'>To</label>\n          <DatePicker\n            id=\"endMonth\"\n            selected={state.endMonth}\n            startDate={state.startMonth}\n            endDate={state.endMonth}\n            onChange={end => dispatch({ value: end, key: 'endMonth' })}\n            dateFormat=\"MMMM yyyy\"\n            showMonthYearPicker\n            showFullMonthYearPicker\n            showTwoColumnMonthYearPicker\n            selectsEnd\n            filterDate={d => d >= state.startMonth}\n          />\n        </div>\n        <a className=\"sidebar-footer\" href=\"https://jondegn.com\">jondegn.com</a>\n      </div>\n      <PDFViewer className=\"main\">\n        <Document>\n          <Page style={{ padding: 36 }} size=\"letter\" orientation='landscape'>\n            {getMonthList(state.startMonth, state.endMonth).map(m => {\n              return (<View>\n                <Text style={{\n                  fontSize: 24,\n                  textAlign: 'center',\n                  marginBottom: 6\n                }}>{`${m.toLocaleDateString('default', { month: 'long' })} ${m.getFullYear()}`}</Text>\n                <Canvas\n                  style={{ width: 720, height: 540 - 33 }}\n                  paint={(painter, availableWidth, availableHeight) => drawCalendar(painter, availableWidth, availableHeight, m)}\n                />\n              </View>)\n            })}\n          </Page>\n        </Document>\n      </PDFViewer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}